@page "/simulation"
@inject IJSRuntime JS
@inject NavigationManager Navigation
@using DeerskinSimulation.Resources
@using DeerskinSimulation.Models

<h3>Deerskin Simulation</h3>

<div class="container">
    <div class="row">
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-header">
                    <h4>@UIStr.HunterTitle (@hunter.Name)</h4>
                </div>
                <div class="card-body">
                    <p>@UIStr.SkinsLabel @hunter.Skins</p>
                    <p>@UIStr.MoneyLabel @hunter.Money</p>
                    <div>
                        <label for="packhorses">Number of Packhorses:</label>
                        <select id="packhorses" class="form-control" @bind="selectedPackhorses">
                            @for (int i = 1; i <= Constants.MaxPackhorses; i++)
                            {
                                <option value="@i">@i</option>
                            }
                        </select>
                        <button class="btn btn-success mt-2" @onclick="() => Hunt(selectedPackhorses)">@UIStr.HuntButton</button>
                        <button class="btn btn-secondary mt-2" @onclick="SellToTrader">@UIStr.SellToTraderButton</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-header">
                    <h4>@UIStr.TraderTitle (@trader.Name)</h4>
                </div>
                <div class="card-body">
                    <p>@UIStr.SkinsLabel @trader.Skins</p>
                    <p>@UIStr.MoneyLabel @trader.Money</p>
                    <div>
                        <button class="btn btn-secondary" @onclick="TransportToExporter">@UIStr.TransportToExporterButton</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-header">
                    <h4>@UIStr.ExporterTitle (@exporter.Name)</h4>
                </div>
                <div class="card-body">
                    <p>@UIStr.SkinsLabel @exporter.Skins</p>
                    <p>@UIStr.MoneyLabel @exporter.Money</p>
                    <div>
                        <button class="btn btn-success" @onclick="Export">@UIStr.ExportButton</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h4>@UIStr.MessagesTitle</h4>
                </div>
                <div class="card-body">
                    <div id="console" style="height: 200px; overflow-y: scroll; border: 1px solid #8b4513; padding: 10px;">
                        @if (messages.Any())
                        {
                            @foreach (var message in messages)
                            {
                                <div style="color:@message.Color">@message.Message</div>
                            }
                        }
                        else
                        {
                            <p>@UIStr.NoMessagesLabel</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Hunter hunter = new Hunter("Hunter1");
    private Trader trader = new Trader("Trader1");
    private Exporter exporter = new Exporter("Exporter1");
    private List<NotificationEventArgs> messages = new List<NotificationEventArgs>();
    private int selectedPackhorses = 1;

    protected override void OnInitialized()
    {
        hunter.OnNotification += HandleNotification;
        trader.OnNotification += HandleNotification;
        exporter.OnNotification += HandleNotification;
    }

    private async void Hunt(int packhorses)
    {
        var result = hunter.Hunt(packhorses);
        messages.Add(new NotificationEventArgs(result, "black"));
        await ScrollToBottomAsync();
    }

    private async void SellToTrader()
    {
        var result = hunter.SellToTrader(trader);
        messages.Add(new NotificationEventArgs(result, "black"));
        await ScrollToBottomAsync();
    }

    private async void TransportToExporter()
    {
        var result = trader.TransportToExporter(exporter);
        messages.Add(new NotificationEventArgs(result, "black"));
        await ScrollToBottomAsync();
    }

    private async void Export()
    {
        var result = exporter.Export();
        messages.Add(new NotificationEventArgs(result, "black"));
        await ScrollToBottomAsync();
    }

    private async void HandleNotification(object sender, NotificationEventArgs e)
    {
        messages.Add(e);
        StateHasChanged();
        await ScrollToBottomAsync();
    }

    private async Task ScrollToBottomAsync()
    {
        await Task.Delay(100); // Give time for the UI to update
        await JS.InvokeVoidAsync("scrollToBottom", "console");
    }
}

<script>
    window.scrollToBottom = function (elementId) {
        var element = document.getElementById(elementId);
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    };
</script>
