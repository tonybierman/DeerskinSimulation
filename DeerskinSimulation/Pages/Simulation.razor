@page "/simulation"
@inject IJSRuntime JS
@inject NavigationManager Navigation
@using DeerskinSimulation.Resources
@using DeerskinSimulation.Models
@using DeerskinSimulation.ViewModels
@implements IDisposable
@inject StateContainer StateContainer

<h3>Deerskin Simulation</h3>

<div class="container">

    <div class="row">
        <div class="col-md-3">
            <div class="card mb-4">
                <div class="card-header">
                    <h4>@UIStr.LogisticsTitle</h4>
                    @if (StateContainer.Debug == true)
                    {
                        <h6>DEBUG</h6>   
                    }
                </div>
                <div class="card-body">
                    <div>
                        <h4>@viewModel.HunterInstance.Name</h4>
                        <p>@UIStr.SkinsLabel @viewModel.HunterInstance.Skins</p>
                        <p>@UIStr.MoneyLabel @string.Format("{0:C}", viewModel.HunterInstance.Money)</p>
                        <div>
                            <button class="btn btn-success mt-2" @onclick="ShowHuntOptions">@UIStr.HuntButton</button>
                            <button class="btn btn-secondary mt-2" @onclick="ShowSellOptions">@UIStr.SellToTraderButton</button>
                        </div>
                    </div>
                    <hr/>
                    <div>
                        <h4>Store at @viewModel.TraderInstance.Name</h4>
                        <p>@UIStr.SkinsLabel @viewModel.TraderInstance.Skins</p>
                        <p>@UIStr.MoneyLabel @string.Format("{0:C}", viewModel.TraderInstance.Money)</p>
                        <div>
                            <button class="btn btn-secondary" @onclick="ShowTransportOptions">@UIStr.TransportToExporterButton</button>
                        </div>
                    </div>
                    <hr />
                    <div>
                        <h4>Port of @viewModel.ExporterInstance.Name</h4>
                        <p>@UIStr.SkinsLabel @viewModel.ExporterInstance.Skins</p>
                        <p>@UIStr.MoneyLabel @string.Format("{0:C}", viewModel.ExporterInstance.Money)</p>
                        <div>
                            <button class="btn btn-success" @onclick="ShowExportOptions">@UIStr.ExportButton</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <MessageConsole EventArgs="viewModel.Messages" />
    </div>
 
</div>

@if (showHuntOptions)
{
    <HuntOptions OnHuntConfirmed="ConfirmHunt" OnHuntCancelled="CancelHunt" />
}

@if (showSellOptions)
{
    <SellOptions OnSellConfirmed="ConfirmSell" OnSellCancelled="CancelSell" DefaultNumberOfSkins="@viewModel.HunterInstance.Skins" />
}

@if (showTransportOptions)
{
    <TransportOptions OnTransportConfirmed="ConfirmTransport" OnTransportCancelled="CancelTransport" DefaultNumberOfSkins="@viewModel.TraderInstance.Skins" />
}

@if (showExportOptions)
{
    <ExportOptions OnExportConfirmed="ConfirmExport" OnExportCancelled="CancelExport" DefaultNumberOfSkins="@viewModel.ExporterInstance.Skins" />
}

@code {
    private SimulationViewModel viewModel = new SimulationViewModel();
    private bool showHuntOptions = false;
    private bool showSellOptions = false;
    private bool showTransportOptions = false;
    private bool showExportOptions = false;

    protected override void OnInitialized()
    {
        viewModel.StateChanged += OnStateChanged;
        StateContainer.OnChange += StateHasChanged;
    }

    private async Task OnStateChanged()
    {
        StateHasChanged();
        await ScrollToBottomAsync();
    }

    private async Task ScrollToBottomAsync()
    {
        await Task.Delay(100); // Give time for the UI to update
        await JS.InvokeVoidAsync("scrollToBottom", "console");
    }

    private void ShowHuntOptions()
    {
        showHuntOptions = true;
    }

    private void CancelHunt()
    {
        showHuntOptions = false;
    }

    private async Task ConfirmHunt(HuntOptionsViewModel huntOptions)
    {
        showHuntOptions = false;
        viewModel.SelectedPackhorses = huntOptions.SelectedPackhorses;
        await viewModel.Hunt();
    }

    private void ShowSellOptions()
    {
        showSellOptions = true;
    }

    private void CancelSell()
    {
        showSellOptions = false;
    }

    private async Task ConfirmSell(SellOptionsViewModel sellOptions)
    {
        showSellOptions = false;
        await viewModel.SellToTrader(sellOptions.NumberOfSkins);
    }

    private void ShowTransportOptions()
    {
        showTransportOptions = true;
    }

    private void CancelTransport()
    {
        showTransportOptions = false;
    }

    private async Task ConfirmTransport(TransportOptionsViewModel transportOptions)
    {
        showTransportOptions = false;
        await viewModel.TransportToExporter(transportOptions.NumberOfSkins);
    }

    private void ShowExportOptions()
    {
        showExportOptions = true;
    }

    private void CancelExport()
    {
        showExportOptions = false;
    }

    private async Task ConfirmExport(ExportOptionsViewModel exportOptions)
    {
        showExportOptions = false;
        await viewModel.Export(exportOptions.NumberOfSkins);
    }

    public void Dispose()
    {
        viewModel.StateChanged -= OnStateChanged;
        StateContainer.OnChange -= StateHasChanged;
    }
}

<script>
    window.scrollToBottom = function (elementId) {
        var element = document.getElementById(elementId);
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    };
</script>
