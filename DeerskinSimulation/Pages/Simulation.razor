@page "/simulation"
@inject IJSRuntime JS
@inject NavigationManager Navigation
@using DeerskinSimulation.Resources
@using DeerskinSimulation.Models
@using DeerskinSimulation.ViewModels

@implements IDisposable

<h3>Deerskin Simulation</h3>

<div class="container">
    <div class="row">
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-header">
                    <h4>@UIStr.HunterTitle (@viewModel.HunterInstance.Name)</h4>
                </div>
                <div class="card-body">
                    <p>@UIStr.SkinsLabel @viewModel.HunterInstance.Skins</p>
                    <p>@UIStr.MoneyLabel @viewModel.HunterInstance.Money</p>
                    <div>
                        <label for="packhorses">Number of Packhorses:</label>
                        <select id="packhorses" class="form-control" @bind="viewModel.SelectedPackhorses">
                            @for (int i = 1; i <= Constants.MaxPackhorses; i++)
                            {
                                <option value="@i">@i</option>
                            }
                        </select>
                        <button class="btn btn-success mt-2" @onclick="ShowHuntOptions">@UIStr.HuntButton</button>
                        <button class="btn btn-secondary mt-2" @onclick="ShowSellOptions">@UIStr.SellToTraderButton</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-header">
                    <h4>@UIStr.TraderTitle (@viewModel.TraderInstance.Name)</h4>
                </div>
                <div class="card-body">
                    <p>@UIStr.SkinsLabel @viewModel.TraderInstance.Skins</p>
                    <p>@UIStr.MoneyLabel @viewModel.TraderInstance.Money</p>
                    <div>
                        <button class="btn btn-secondary" @onclick="viewModel.TransportToExporter">@UIStr.TransportToExporterButton</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-header">
                    <h4>@UIStr.ExporterTitle (@viewModel.ExporterInstance.Name)</h4>
                </div>
                <div class="card-body">
                    <p>@UIStr.SkinsLabel @viewModel.ExporterInstance.Skins</p>
                    <p>@UIStr.MoneyLabel @viewModel.ExporterInstance.Money</p>
                    <div>
                        <button class="btn btn-success" @onclick="viewModel.Export">@UIStr.ExportButton</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h4>@UIStr.MessagesTitle</h4>
                </div>
                <div class="card-body">
                    <div id="console" style="height: 200px; overflow-y: scroll; border: 1px solid #8b4513; padding: 10px;">
                        @if (viewModel.Messages.Any())
                        {
                            @foreach (var message in viewModel.Messages)
                            {
                                <div style="color:@message.Color">@message.Message</div>
                            }
                        }
                        else
                        {
                            <p>@UIStr.NoMessagesLabel</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (showHuntOptions)
{
    <HuntOptions OnHuntConfirmed="ConfirmHunt" OnHuntCancelled="CancelHunt" />
}

@if (showSellOptions)
{
    <SellOptions OnSellConfirmed="ConfirmSell" OnSellCancelled="CancelSell" />
}

@code {
    private SimulationViewModel viewModel = new SimulationViewModel();
    private bool showHuntOptions = false;
    private bool showSellOptions = false;

    protected override void OnInitialized()
    {
        viewModel.StateChanged += OnStateChanged;
    }

    private async Task OnStateChanged()
    {
        StateHasChanged();
        await ScrollToBottomAsync();
    }

    private async Task ScrollToBottomAsync()
    {
        await Task.Delay(100); // Give time for the UI to update
        await JS.InvokeVoidAsync("scrollToBottom", "console");
    }

    private void ShowHuntOptions()
    {
        showHuntOptions = true;
    }

    private void CancelHunt()
    {
        showHuntOptions = false;
    }

    private async Task ConfirmHunt(HuntOptionsViewModel huntOptions)
    {
        showHuntOptions = false;
        viewModel.SelectedPackhorses = huntOptions.SelectedPackhorses;
        await viewModel.Hunt();
    }

    private void ShowSellOptions()
    {
        showSellOptions = true;
    }

    private void CancelSell()
    {
        showSellOptions = false;
    }

    private async Task ConfirmSell(SellOptionsViewModel sellOptions)
    {
        showSellOptions = false;
        await viewModel.SellToTrader(sellOptions.NumberOfSkins);
    }

    public void Dispose()
    {
        viewModel.StateChanged -= OnStateChanged;
    }
}

<script>
    window.scrollToBottom = function (elementId) {
        var element = document.getElementById(elementId);
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    };
</script>
