@page "/simulation"
@inject IJSRuntime JS
@inject NavigationManager Navigation
@using DeerskinSimulation.Resources
@using DeerskinSimulation.Models
@using DeerskinSimulation.Services
@using DeerskinSimulation.ViewModels
@implements IDisposable
@inject StateContainer Session
@inject GameLoopService GameLoopService
@inject SimulationViewModel ViewModel

<h3>Deerskin Simulation</h3>

<div class="container">

    <div class="row">
        <div class="col-md-3">
            <div class="card mb-4">
                <div class="card-header">
                    <h4>
                        @if (@ViewModel.CurrentUserActivity?.Meta != null)
                        {
                            <text>@ViewModel.CurrentUserActivity?.Meta?.Name: @(10 - ViewModel.CurrentDay) Days</text>
                        }
                        else
                        {
                            @UIStr.LogisticsTitle
                        }
                    </h4>
                    @if (Session.Debug == true)
                    {
                        <h6>@string.Format("DEBUG {0:F2} FPS", fps)</h6>
                    }
                </div>
                <div class="card-body">
                    <div>
                        <h4>@ViewModel.HunterInstance.Name</h4>
                        <p>@UIStr.SkinsLabel @ViewModel.HunterInstance.Skins</p>
                        <p>@UIStr.MoneyLabel @string.Format("{0:C}", ViewModel.HunterInstance.Money)</p>

                        <div>
                            <button class="btn btn-success mt-2" @onclick="ShowHuntOptions">@UIStr.HuntButton</button>
                            <button class="btn btn-secondary mt-2" @onclick="ShowForwardOptions">@UIStr.SellToTraderButton</button>
                        </div>
                    </div>
                    <hr/>
                    <div>
                        <h4>Store at @ViewModel.TraderInstance.Name</h4>
                        <p>@UIStr.SkinsLabel @ViewModel.TraderInstance.Skins</p>
                        <p>@UIStr.MoneyLabel @string.Format("{0:C}", ViewModel.TraderInstance.Money)</p>
                        <div>
                            <button class="btn btn-secondary" @onclick="ShowTransportOptions">@UIStr.TransportToExporterButton</button>
                        </div>
                    </div>
                    <hr />
                    <div>
                        <h4>Port of @ViewModel.ExporterInstance.Name</h4>
                        <p>@UIStr.SkinsLabel @ViewModel.ExporterInstance.Skins</p>
                        <p>@UIStr.MoneyLabel @string.Format("{0:C}", ViewModel.ExporterInstance.Money)</p>
                        <div>
                            <button class="btn btn-success" @onclick="ShowExportOptions">@UIStr.ExportButton</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <MessageConsole Events="ViewModel.Messages" />
    </div>
 
</div>

@if (showHuntOptions)
{
    <HuntOptions OnHuntConfirmed="ConfirmHunt" OnHuntCancelled="CancelHunt" />
}

@if (showForwardOptions)
{
    <ForwardOptions OnForwardConfirmed="ConfirmForward" OnForwardCancelled="CancelForward" DefaultNumberOfSkins="@ViewModel.HunterInstance.Skins" />
}

@if (showTransportOptions)
{
    <TransportOptions OnTransportConfirmed="ConfirmTransport" OnTransportCancelled="CancelTransport" DefaultNumberOfSkins="@ViewModel.TraderInstance.Skins" />
}

@if (showExportOptions)
{
    <ExportOptions OnExportConfirmed="ConfirmExport" OnExportCancelled="CancelExport" DefaultNumberOfSkins="@ViewModel.ExporterInstance.Skins" />
}

@code {
    private bool showHuntOptions = false;
    private bool showForwardOptions = false;
    private bool showTransportOptions = false;
    private bool showExportOptions = false;
    private double fps;

    protected override void OnInitialized()
    {
        GameLoopService.OnGameTick += UpdateGame;
        GameLoopService.OnDayPassed += UpdateDay;
        ViewModel.StateChanged += OnStateChanged;
        Session.OnChange += StateHasChanged;
    }

    private async Task OnStateChanged()
    {
        StateHasChanged();
    }

    #region hunt

    private void ShowHuntOptions()
    {
        showHuntOptions = true;
    }

    private void CancelHunt()
    {
        showHuntOptions = false;
    }

    private async Task ConfirmHunt(HuntOptionsViewModel huntOptions)
    {
        ViewModel.Messages.Clear();
        ViewModel.CurrentDay = 0;
        showHuntOptions = false;
        ViewModel.SelectedPackhorses = huntOptions.SelectedPackhorses;
        await ViewModel.ConfirmHuntCmd.ExecuteAsync(huntOptions);
    }

    #endregion

    #region forward

    private void ShowForwardOptions()
    {
        showForwardOptions = true;
    }

    private void CancelForward()
    {
        showForwardOptions = false;
    }

    private async Task ConfirmForward(ForwardOptionsViewModel forwardOptions)
    {
        ViewModel.Messages.Clear();
        ViewModel.CurrentDay = 0;
        showForwardOptions = false;
        await ViewModel.ConfirmSellCmd.ExecuteAsync(forwardOptions);
    }

    #endregion

    #region transport

    private void ShowTransportOptions()
    {
        showTransportOptions = true;
    }

    private void CancelTransport()
    {
        showTransportOptions = false;
    }

    private async Task ConfirmTransport(TransportOptionsViewModel transportOptions)
    {
        if (transportOptions.NumberOfSkins > 0)
        {
            ViewModel.Messages.Clear(); 
            ViewModel.CurrentDay = 0;
            showTransportOptions = false;
            await ViewModel.ConfirmTransportCmd.ExecuteAsync(transportOptions);
        }
    }

    #endregion

    #region export

    private void ShowExportOptions()
    {
        showExportOptions = true;
    }

    private void CancelExport()
    {
        showExportOptions = false;
    }

    private async Task ConfirmExport(ExportOptionsViewModel exportOptions)
    {
        if (exportOptions.NumberOfSkins > 0)
        {
            ViewModel.Messages.Clear(); 
            ViewModel.CurrentDay = 0;
            showExportOptions = false;
            await ViewModel.ConfirmExportCmd.ExecuteAsync(exportOptions);
        }
    }

    #endregion

    private async void UpdateDay()
    {
        ViewModel.UpdateDay();
        await InvokeAsync(StateHasChanged);
    }

    private async void UpdateGame()
    {
        fps = GameLoopService.FPS;
    }

    public void Dispose()
    {
        ViewModel.StateChanged -= OnStateChanged;
        Session.OnChange -= StateHasChanged;
        GameLoopService.OnGameTick -= UpdateGame;
        GameLoopService.OnDayPassed -= UpdateDay;
    }
}
